---
import { getCollection, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { Disc3, Gem, MapPin } from "lucide-react";

import "@styles/globals.css";

import Layout from "@/layouts/Layout.astro";
import { Container } from "@/components/ui/container";
import { Badge } from "@/components/ui/badge";
import Metadata from "@/components/Metadata.astro";
import ReleaseCard from "@/components/ReleaseCard.astro";
import { sortByReleaseDate } from "@utils/sort";
import ImagePlaceholder from "@/components/ImagePlaceholder.astro";

type Props = CollectionEntry<"artist">;

export async function getStaticPaths() {
  const artists = await getCollection("artist");

  return artists.map((entry) => ({
    params: { slug: entry.slug },
    props: entry,
  }));
}

const releases = await getCollection("release");
const artists = await getCollection("artist");

const { slug, data } = Astro.props;
const { country, city, name, gender, image, specialRole } = data;

const releasesByArtists = releases
  .filter((release) => {
    const artistsOfReleaseMatches = release.data.artists.filter(
      (info) => info.slug === slug,
    );

    return artistsOfReleaseMatches.length > 0;
  })
  .sort(sortByReleaseDate);
---

<Layout>
  <Metadata
    slot="head"
    image={`/artists/${slug}/og.png`}
    title={`${name} | Beyond Souls Records`}
    description={name}
    type="profile"
    firstName={name}
    username={name}
    gender={gender}
  />
  <section>
    <Container>
      <article class="w-full">
        <div
          class="flex flex-col-reverse sm:flex-row md:flex-nowrap md:items-center md:justify-between mb-12"
        >
          <div class="flex-grow sm:mr-4">
            <p class="font-semibold text-xl mt-2">Artist</p>
            <h1
              class="font-black text-5xl md:text-7xl lg:text-9xl md:max-w-5/6"
            >
              {name}
            </h1>
            <div class="flex flex-row flex-wrap gap-2 mt-2">
              <Badge>
                <MapPin className="w-3 h-3 mr-1" />
                {city ? `${city}, ` : ""}
                {country}
              </Badge>
              {
                specialRole && (
                  <Badge variant="secondary">
                    <Gem className="w-3 h-3 mr-1" />
                    {specialRole}
                  </Badge>
                )
              }
              <Badge variant="outline">
                <Disc3 className="w-3 h-3 mr-1" />
                {releasesByArtists.length} Releases
              </Badge>
            </div>
          </div>
          <div class="sm:w-1/4 lg:w-1/3 max-w-4xl">
            <div class="mb-4 lg:mb-0">
              {
                image && (
                  <Image
                    class="rounded-md w-full aspect-square object-cover object-center"
                    src={image}
                    alt="asdf"
                    width="1000"
                    height="1000"
                  />
                )
              }
              {!image && <ImagePlaceholder />}
            </div>
          </div>
        </div>
        <h2 class="text-3xl font-bold my-6">Releases by this artist</h2>
        <div
          class="grid grid-cols-1 gap-y-8 md:grid-cols-2 lg:grid-cols-3 md:gap-x-8 md:gap-y-4"
        >
          {
            releasesByArtists.map((release) => (
              <ReleaseCard
                release={release}
                artists={artists.filter(
                  (artist) =>
                    release.data.artists.filter((x) => x.slug === artist.slug)
                      .length > 0,
                )}
              />
            ))
          }
        </div>
      </article>
    </Container>
  </section>
</Layout>
